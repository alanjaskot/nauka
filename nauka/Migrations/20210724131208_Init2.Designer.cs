// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using nauka.V3.Repository;

namespace nauka.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20210724131208_Init2")]
    partial class Init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("nauka.V3.Models.AppSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<byte>("AvaibleVacationDays")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EmployeeId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("nauka.V3.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppSettinsgId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmployeePermisson")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SectionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<char>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<bool>("VacationPermisson")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("nauka.V3.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("nauka.V3.Models.Vacation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Approve")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VacationDaysId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("nauka.V3.Models.VacationDays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<long>("Days")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("VacationId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VacationId")
                        .IsUnique();

                    b.ToTable("VacationDays");
                });

            modelBuilder.Entity("nauka.V3.Models.Vacation_Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VacationId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId", "VacationId");

                    b.HasIndex("VacationId");

                    b.ToTable("VacationOfEmployees");
                });

            modelBuilder.Entity("nauka.V3.Models.AppSettings", b =>
                {
                    b.HasOne("nauka.V3.Models.Employee", "Employee")
                        .WithOne("AppSettings")
                        .HasForeignKey("nauka.V3.Models.AppSettings", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("nauka.V3.Models.Employee", b =>
                {
                    b.HasOne("nauka.V3.Models.Section", "Section")
                        .WithMany("Employees")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("nauka.V3.Models.VacationDays", b =>
                {
                    b.HasOne("nauka.V3.Models.Vacation", "Vacation")
                        .WithOne("VacationDays")
                        .HasForeignKey("nauka.V3.Models.VacationDays", "VacationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("nauka.V3.Models.Vacation_Employee", b =>
                {
                    b.HasOne("nauka.V3.Models.Employee", "Employee")
                        .WithMany("Vacation_Employees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("nauka.V3.Models.Vacation", "Vacation")
                        .WithMany("Vacation_Employees")
                        .HasForeignKey("VacationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("nauka.V3.Models.Employee", b =>
                {
                    b.Navigation("AppSettings");

                    b.Navigation("Vacation_Employees");
                });

            modelBuilder.Entity("nauka.V3.Models.Section", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("nauka.V3.Models.Vacation", b =>
                {
                    b.Navigation("Vacation_Employees");

                    b.Navigation("VacationDays");
                });
#pragma warning restore 612, 618
        }
    }
}
